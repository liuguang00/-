import java.util.Properties

import com.bingocloud.{ClientConfiguration, Protocol}
import com.bingocloud.auth.BasicAWSCredentials
import com.bingocloud.services.s3.AmazonS3Client
import org.apache.kafka.clients.producer.{KafkaProducer, ProducerRecord}
import org.nlpcn.commons.lang.util.IOUtil
import java.sql.{ Connection, DriverManager }

object Main {
 
  val url = "bigdata28.depts.bingosoft.net:23307"
  val username = "user30"
  val password = "pass@bingo30"

  //kafka参数
  val topic = "leiguangyu"
  val bootstrapServers = "bigdata35.depts.bingosoft.net:29035,bigdata36.depts.bingosoft.net:29036,bigdata37.depts.bingosoft.net:29037"

  def main(args: Array[String]): Unit = {
    var connection: Connection = null

    classOf[com.mysql.jdbc.Driver] //加载数据库驱动
    connection = DriverManager.getConnection(url, username, password)//获取数据库连接
    try {
      val statement = connection.createStatement()
      val resultSet = statement.executeQuery("select * from t_rk_jbxx_result")

      while (resultSet.next()) {
        val sfzhm = resultSet.getString("sfzhm")
        val xm = resultSet.getString("xm")
        val asjbh = resultSet.getString("asjbh")
        val ajmc = resultSet.getString("ajmc")
        val aj_jyqk = resultSet.getString("aj_jyqk")
        println("xm = " + xm + ",ajmc " + ajmc )
        produceToKafka("sfzhm:" + sfzhm + "xm:" + xm + "asjbh" + asjbh + "ajmc:" + ajmc + "aj_jyqk:" + aj_jyqk + "\n")
      }
    } catch {
      case e => e.printStackTrace
    }
    connection.close()

  }



  /**
    * 把数据写入到kafka中
    *
    * @param s3Content 要写入的内容
    */
  def produceToKafka(s3Content: String): Unit = {
    val props = new Properties
    props.put("bootstrap.servers", bootstrapServers)
    props.put("acks", "all")
    props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer")
    props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer")
    val producer = new KafkaProducer[String, String](props)
    val dataArr = s3Content.split("\n")
    for (s <- dataArr) {
      if (!s.trim.isEmpty) {
        val record = new ProducerRecord[String, String](topic, null, s)
        println("开始生产数据：" + s)
        producer.send(record)
      }
    }
    producer.flush()
    producer.close()
  }
}
